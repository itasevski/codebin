* There is a separate SecurityContextHolder object for every single thread, i.e every single user that authenticates in our system. This object contains the
SecurityContext, which contains the Authentication object set during authentication, which holds the principal (User object), credentials and authorities of
the user.
* When we set the session creation policy to STATELESS, we ensure that after EVERY request of the specific user, his SecurityContext gets cleared, meaning
it is not persisted inbetween requests and session state is not maintained for the user, as the name suggests. However, we still must update and use the 
SecurityContext of the user during the request's lifetime, since it gets used by other Spring Security filters for checking the user's authentication. For
example, we update the user's context in our AuthFilter and when the filter's execution is over, the other Spring Security filters get executed and receive
the request and response objects as parameters and then they check whether there is an Authentication object in the user's SecurityContext (UsernamePassword
AuthenticationToken), i.e whether the user has been authenticated/authorized and if the checks pass, a 200 OK response is returned and SecurityContext is 
cleared, otherwise a 403 Forbidden is returned and SecurityContext is cleared. After all the filters finish executing, the request finally reaches our REST 
API endpoint, service logic is executed and response is returned to user, after which his SecurityContext (session state) gets cleared. To summarize, when
session policy is STATELESS, session state (SecurityContext) is ephemeral (lasts shortly, only during the request's lifetime).
* When we set the session creation policy to ALWAYS, which is stateful, all of the principles mentioned above are still valid, but now session state is 
maintained and persisted throughout requests and the SecurityContexts for every user are kept in the server and every user has his own session. The Security
Context is NOT cleared after every request and it is NOT ephemeral. If this is set when configuring JWT authentication, the whole point of that type of 
STATELESS authentication becomes obsolete.

-- CORS configuration
* Cross-Origin Resource Sharing (CORS) is basically a mechanism that allows specified origins to access our server resources through specified, allowed request methods
that contain specified, allowed request headers and/or cookies.
* As of the current Spring Security version, the security configuration implementation has changed. Now, as it seems, if we completely disable CORS through the
HTTP configuration, the @CrossOrigin annotation seems useless. This was tested when CORS was disabled and @CrossOrigin was set on the REST controllers and
"Access-Control-Allow-Origin" errors were encountered on the client side. The @CrossOrigin annotation would set whitelisted origins on the controller-level, but now
it doesn't seem to work. However, a far more sophisticated approach that should always be enforced was implemented, where instead of completely disabling CORS and
defining whitelisted CORS origins on the controller level, we add our own custom CORS configuration, where we specify allowed origins, headers, credentials, methods
and more. Through this, we have full control over the domains that access our REST API, the methods and headers that are used and much more, without the need to write
repeatable code on every single controller.
* Another important note to mention is that the "Access-Control-Allow-Origin" header that causes errors on the client side when making requests shouldn't be set
on the client side, since the server, i.e the CORS configuration should decide which origins are allowed to access the given resource.

-- CSRF configuration
* Cross-Site Request Forgery (CSRF) is an attack that tricks users to make requests to web servers that they're currently authenticated in.
* This type of attack can occur when we are using cookies for authentication, which the browser automatically sends to our server in requests, including through
top-level navigation (anchor tags on page), depending on the cookie policy. The attacker can create a malformed link that leads to the attacker's website, that
looks exactly like the legitimate website, with a very similar, yet malformed, domain as the legitimate website (missing a letter, additional letter etc.). This website
can contain either scripts that execute upon page load or anchor tags that when clicked, make requests to the legitimate web server. If the cookie policy from the legitimate
server is not set to "Strict", that would mean that the browser would automatically include the cookies (in our case, the auth cookies) with the request, allowing
the attacker to steal sensitive data and access protected resources, presenting himself as the authenticated user.
* There are many ways to protect the user from this type of attack. One way is by configuring the CORS policy on the server to only allow incoming requests from a specified
domain. Another way is to have same domains for both the client and server and setting the cookie "sameSite" policy to "Strict" on the server side, meaning that cookies will not
be included in requests that have a different source URL than the issuing server's domain. The third and most safe, yet complicated way is through CSRF tokens.
* CSRF tokens (or anti-CSRF tokens) are tokens that are generated by the server for every session of the user. Their purpose is to protect the user from CSRF attacks by generating
unique tokens that are sent to the legitimate user, stored and handled on the legitimate client, and sent along with every request made from the legitimate client. They shouldn't be
stored in cookies, since that would make their purpose obsolete, as they would be sent along with every request if the cookie "sameSite" policy is not "Strict".
* In this system, all three ways are covered. We have the CORS policy set to only allow incoming requests from "localhost:3000" and have set the cookie "sameSite" policy to "Strict", allowing
only cookies coming from "localhost" to be accepted. A custom CSRF system is also implemented, that generates a new CSRF token for every user session and stores that token
in localStorage on the client. When the authenticated user initially accesses the website or refreshes the page, that indicates a new user session and a call to "/api/user" is made to fetch the current
user's data (username, role) and to generate a new CSRF token for the user and include it in the body of the response. If the user is not authenticated, the API request is not made. Once the user logs in,
a CSRF token is generated and sent as part of the response body. As long as the user is authenticated, on every page visit and refresh a new CSRF token would be generated.
* This way, the attacker would have no way of knowing the CSRF token and even if he succeeds with his malformed link and the cookies are sent to the server, he wouldn't have the
current CSRF token, thus the request would be rejected.
* If the attacker somehow manages to steal the user's CSRF token, we provide client-side security by encrypting the CSRF token and storing it in the browser's local storage, so without having the
secret key, the attacker would find the CSRF token useless.
* It is also important to note that the tokens are stored in-memory (in a ConcurrentHashMap), as the server is active. If the server crashes, the tokens are backed up into database. Upon starting the
server, they would be loaded back up from database to in-memory storage.

-- XSS configuration
* Cross-Site Scripting (XSS) is an attack in which an attacker injects malicious executable scripts into the code of a trusted application or website.
* In this system, we use HttpOnly cookies that can't be read with JavaScript, meaning that a script executed with an XSS attack wouldn't be able to read and
steal the user's auth cookies.
* XSS scripts usually involve injecting a "<script>" in a String generated by the client, triggering execution of the script. However, React, by default, protects
against DOM-based XSS attacks by ignoring any additional tags injected into Strings (when they are evaluated) and preventing the execution of scripts and DOM modification.
* The "dangerouslySetInnerHtml" can be used in React to render raw HTML, and it is called dangerous exactly because of this, since the HTML that gets set isn't sanitized by React, as
other normal fields are. If we use this property, we must manually sanitize the input and prevent from XSS attacks.










